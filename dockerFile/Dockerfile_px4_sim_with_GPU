ARG ROS_DISTRO=humble
FROM nvidia/cuda:12.9.1-cudnn-devel-ubuntu22.04

LABEL maintainer="Parsa Khaledi <pa.aerospace@gmail.com>"

SHELL ["/bin/bash", "-c"]

ARG USER_NAME=px4
ARG USER_UID=2000
ARG USER_GID=2000
ARG OPENCV_VERSION=4.11.0 # Define OpenCV version as an ARG


ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"
ENV DEBIAN_FRONTEND=noninteractive
ENV QT_X11_NO_MITSHM=1
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8
ENV PATH="/root/.local/bin:$PATH"
# ENV ROS2_INSTALL_PATH=/opt/ros/$ROS_DISTRO
ENV HOME=/home/${USER_NAME}
ENV WORKDIR=/home/${USER_NAME}/ws_px4
ENV ROS_DISTRO=humble

WORKDIR ${WORKDIR}

RUN apt-get clean
RUN apt update 1>/dev/null && apt -y upgrade 1>/dev/null && \
	apt install -y --no-install-recommends \
	vim udev git sudo unzip curl cmake make wget tmux build-essential\
	gnupg2 lsb-release iputils-ping\
	gstreamer1.0-plugins-bad gstreamer1.0-libav gstreamer1.0-gl libpulse-mainloop-glib0 \
	kmod fuse libx11-6 libgtk-3-dev  libglu1-mesa libopenjp2-7-dev \
	libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-base1.0-dev\
	libgstreamer-plugins-base1.0-dev \
	pkg-config libgtk-3-dev libavcodec-dev libavformat-dev  libswscale-dev \
    libv4l-dev libxvidcore-dev libx264-dev libjpeg-dev libpng-dev libtiff-dev \
    gfortran openexr libatlas-base-dev \
	libfuse2 libxcb-xinerama0 libxkbcommon-x11-0 libxcb-cursor-dev  \
	xauth xorg openbox x11-utils\
	python3 python3-argcomplete python3-pip python3-dev \
	libcanberra-gtk-module libeigen3-dev libgflags-dev libgoogle-glog-dev\
	gcc-arm-none-eabi apt-utils  1>/dev/null
	
### Create User	
RUN groupadd ${USER_NAME} --gid ${USER_GID} && \
    useradd -l -m ${USER_NAME} -u ${USER_UID} -g ${USER_GID} -s /bin/bash && \
	echo "${USER_NAME} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${USER_NAME} && \
	mkdir -p ${WORKDIR} && \
	chmod 0440 /etc/sudoers.d/${USER_NAME} && chown -R ${USER_NAME}:${USER_NAME} ${HOME}

	### Install NICE DCV for high performance stream
# RUN cd ${WORKDIR} && \
# 	wget https://d1uj6qtbmh3dt5.cloudfront.net/NICE-GPG-KEY && gpg --import NICE-GPG-KEY && \
#     wget https://d1uj6qtbmh3dt5.cloudfront.net/2023.1/Servers/nice-dcv-2023.1-16388-ubuntu2204-x86_64.tgz && \
# 	tar -xvzf nice-dcv-2023.1-16388-ubuntu2204-x86_64.tgz && \
# 	cd nice-dcv-2023.1-16388-ubuntu2204-x86_64 && \
# 	apt install -y ./nice-dcv-server_2023.1.16388-1_amd64.ubuntu2204.deb 1>/dev/null

RUN mkdir -p ${HOME}/OPENCV && cd ${HOME}/OPENCV && \
    curl -L https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip -o opencv-${OPENCV_VERSION}.zip && \
    curl -L https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip -o opencv_contrib-${OPENCV_VERSION}.zip && \
    unzip opencv-${OPENCV_VERSION}.zip 1>/dev/null && unzip opencv_contrib-${OPENCV_VERSION}.zip 1>/dev/null && \
	rm opencv-${OPENCV_VERSION}.zip opencv_contrib-${OPENCV_VERSION}.zip && \
    cd opencv-${OPENCV_VERSION} && \
    mkdir release && cd release && \
    cmake -D CMAKE_BUILD_TYPE=Release \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D WITH_CUDA=ON      \
        -D WITH_CUDNN=ON     \
        -D WITH_CUBLAS=ON    \
        -D OPENCV_DNN_CUDA=ON \
        -D CUDA_ARCH_BIN=8.7 \
        -D CUDA_ARCH_PTX=""  \
        -D OPENCV_GENERATE_PKGCONFIG=ON \
        -D WITH_GSTREAMER=ON \
        -D WITH_LIBV4L=ON    \
        -D ENABLE_FAST_MATH=1 \
        -D CUDA_FAST_MATH=1  \
        -D WITH_CUBLAS=ON    \
        -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${OPENCV_VERSION}/modules\
        -D BUILD_EXAMPLES=OFF \
        -D BUILD_opencv_python3=ON \
        -D BUILD_opencv_python2=OFF \
        -D PYTHON_EXECUTABLE=/usr/bin/python3 \
        -D BUILD_TESTS=OFF \
        -D BUILD_PERF_TESTS=OFF \
        -D CMAKE_INSTALL_PREFIX=/usr/local .. && \
    make -j5 && \
    sudo make install && \
    echo 'export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH' >> ~/.bashrc && \
    echo 'export PYTHONPATH=/usr/local/lib/python3.10/site-packages/:$PYTHONPATH' >> ~/.bashrc && \
    source ~/.bashrc && \
    sudo ldconfig && \
    cd ${HOME}/ && rm -rf OPENCV # Clean up

### INSTALL ROS2 and Nav2
RUN apt update 1>/dev/null && apt -y install locales --no-install-recommends && \
        locale-gen en_US.UTF-8 && \
        update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 1>/dev/null && \
	sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt update 1>/dev/null &&\
    apt install -y --no-install-recommends \
		ros-$ROS_DISTRO-ros-base \
	    ros-$ROS_DISTRO-tf2-eigen \
		ros-$ROS_DISTRO-rclcpp \
		ros-$ROS_DISTRO-rmw-cyclonedds-cpp \
		ros-$ROS_DISTRO-rviz2* \
		ros-$ROS_DISTRO-rqt \
		ros-$ROS_DISTRO-rqt-image-view ros-$ROS_DISTRO-rqt-graph \
		ros-$ROS_DISTRO-rqt-topic      ros-$ROS_DISTRO-rqt-tf-tree \
		ros-dev-tools 1>/dev/null && \
	rosdep init && rosdep update 

### Install Nav2 and rtabmap
RUN apt install -y  --no-install-recommends  \
		ros-$ROS_DISTRO-rmw-cyclonedds-cpp \
		ros-$ROS_DISTRO-navigation2 \
		ros-$ROS_DISTRO-nav2-bringup \
		ros-$ROS_DISTRO-rtabmap-ros 1>/dev/null

### Install GZ and some Reqs
RUN wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg && \
	echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | \ 
	sudo tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null && \
	apt update && apt install -y --no-install-recommends\
	gz-harmonic ros-${ROS_DISTRO}-ros-gzharmonic 1>/dev/null
	
# # Change user
USER ${USER_NAME}
WORKDIR /${USER_NAME}/ws_px4

### Install Qground
RUN sudo usermod -a -G dialout root && sudo usermod -a -G dialout px4 && sudo apt remove modemmanager -y &&\
	cd ${HOME} && wget https://d176tv9ibo4jno.cloudfront.net/latest/QGroundControl.AppImage &&\
	chmod +x ./QGroundControl.AppImage 

### PX4 Setup
# RUN cd ${HOME} && git clone https://github.com/PX4/PX4-Autopilot.git -b v1.15.4 --recursive 1>/dev/null && \
# 	cd ${HOME}/PX4-Autopilot && sudo ./Tools/setup/ubuntu.sh 1>/dev/null

# PX4 Setup using zip archive instead of git clone
RUN cd ${HOME} && \
    wget https://github.com/PX4/PX4-Autopilot/archive/refs/tags/v1.15.4.zip && \
    unzip v1.15.4.zip && \
    mv PX4-Autopilot-1.15.4 PX4-Autopilot && \
    rm v1.15.4.zip && \
    cd ${HOME}/PX4-Autopilot && \
    sudo ./Tools/setup/ubuntu.sh 1>/dev/null

### Install Micro XRCE-DDS
RUN cd ${HOME} && git clone https://github.com/eProsima/Micro-XRCE-DDS-Agent.git && \
	cd ${HOME}/Micro-XRCE-DDS-Agent &&\
	mkdir build && cd build && cmake .. &&\
	make 1>/dev/null && sudo make install 1>/dev/null && sudo ldconfig /usr/local/lib/ &&\
	cd ${HOME} && rm -rf ${HOME}/Micro-XRCE-DDS-Agent/build 1>/dev/null

### Build WS (px4_ros_com && px4_msgs)
RUN mkdir -p ${WORKDIR}/src && \
	cd ${WORKDIR}/src && pip3 install --user \ 
	pyros-genmsg setuptools numpy kconfiglib future jinja2 jsonschema && \
	git clone -b release/1.15 https://github.com/PX4/px4_msgs.git 1>/dev/null && \
	git clone https://github.com/PX4/px4_ros_com.git 1>/dev/null && \
	source /opt/ros/$ROS_DISTRO/setup.bash && cd ${WORKDIR} && colcon build

### Run PX4 Check
RUN cd ${HOME}/PX4-Autopilot && make check_px4_sitl_default

# RUN source /opt/ros/$ROS_DISTRO/setup.bash && cd ${WORKDIR}/src/px4_ros_com/scripts/ && source build_ros2_workspace.bash

### Tumux conf
RUN echo "set -g mouse on" >> ~/.tmux.conf 

### Write in ~/.bashrc
RUN echo "source /opt/ros/$ROS_DISTRO/setup.bash" >> ~/.bashrc && \
	echo "source ${WORKDIR}/install/setup.bash" >> ~/.bashrc 
	# export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

### Finilize
RUN sudo rm -rf /var/lib/apt/lists/* &&\
	sudo apt autoremove -y 

### Adding CMD (Comming Soon :))
